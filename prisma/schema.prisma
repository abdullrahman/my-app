generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  image     String
  createdAt DateTime @default(now())
}

model Info {
  id          Int                @id @default(autoincrement())
  name        String
  city        String
  email       String             @unique
  password    String
  role        UserPermissionRole @default(ADMIN)
  careerObJ   String
  summary     String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  onDelete    Boolean            @default(false)
  certificate Certificate[]
  exper       Experience[]
  project     Project[]
  skil        Skil[]
  socialMedia SocialMedia[]
}

model Certificate {
  id              Int             @id @default(autoincrement())
  certiType       CertificateType
  certiFrom       String?
  certiMajor      String?
  certiGPA        String?
  certiUniv       String?
  certiGrade      String?
  certiFromDate   DateTime?
  certiToDate     DateTime?
  certiTotalHours String?
  InfoId          Int?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime?       @updatedAt
  onDelete        Boolean         @default(false)
  info            Info?           @relation(fields: [InfoId], references: [id])
}

model Skil {
  id        Int      @id @default(autoincrement())
  skil      String
  skilType  String
  InfoId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  onDelete  Boolean  @default(false)
  info      Info     @relation(fields: [InfoId], references: [id])
}

model Experience {
  id            Int      @id @default(autoincrement())
  experName     String
  experFromDate DateTime
  experTodate   DateTime
  experYears    String
  InfoId        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  onDelete      Boolean  @default(false)
  info          Info     @relation(fields: [InfoId], references: [id])
}

model Project {
  id                     Int         @id @default(autoincrement())
  projectName            String
  projectBeneficiary     String
  projectType            ProjectType
  projectDesc            String
  projctSkils            String[]
  projectMainSections    String[]
  projectMainSectionDesc String[]
  projectLink            String
  projectImg             String
  InfoId                 Int
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  onDelete               Boolean     @default(false)
  info                   Info        @relation(fields: [InfoId], references: [id])
}

model SocialMedia {
  id        Int      @id @default(autoincrement())
  sociName  String
  sociLink  String
  InfoId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  onDelete  Boolean  @default(false)
  info      Info     @relation(fields: [InfoId], references: [id])
}

enum UserPermissionRole {
  ADMIN
}

enum CertificateType {
  Associate
  Recomendation
  Distinguished
  OnlinCertificate
}

enum ProjectType {
  Website
  WindowsApplication
  TestTeam
}
